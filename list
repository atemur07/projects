#include <stdio.h>
#include <stdlib.h>
typedef struct node {
    int x;
    struct node *next;
} node;

void printnode(node *proot);
void insert_end(node **proot, int value);
void deallocate(node** root);
void insert_beginning(node **root, int value);
void raddopia(node **root);

int main() {
    node *root = malloc(sizeof(node));
    if (root == NULL) {
        printf("Memory allocation failed.\n");
        exit (1);
    }
    root->x = 2;
    root->next = malloc(sizeof(node));
    if(root->next == NULL) {
        printf("Memory allocation failed.\n");
        free(root);
        exit (1);
    }
    root->next->x = 3;
    root->next->next =NULL;
    insert_end(&root, 5);
    insert_beginning(&root, 27);
    printnode(root);
    raddopia(&root);
    printnode(root);
    deallocate(&root);
    return 0;
}
void printnode(node *proot) {

    for(node* curr = proot; curr!=NULL; curr = curr->next) {
        printf("%d - ", curr->x);
    }
}

void insert_end(node **proot, int value) {
    node *new_node = malloc(sizeof(node));
    if(new_node == NULL) {
        printf("error");
        exit (1);
    }
    new_node->next = NULL;
    new_node->x = value;
    node *curr = *proot;
    while(curr->next != NULL) {
        curr = curr->next;
    }
    curr->next = new_node;
}

void deallocate(node** root) {
    node* curr = *root;
    node* temp;
    while(curr!=NULL) {
        temp = curr;
        curr = curr->next;
        free(temp);
    }
    *root = NULL;
}

void insert_beginning(node **root, int value) {
    node* new_node = malloc(sizeof(node));
    if(new_node == NULL) {
        printf("error");
        exit (1);
    }
    new_node->x = value;
    new_node->next = *root;
    *root = new_node;
}

void raddopia(node **root) {
    node* curr = *root;
    while(curr != NULL) {
        // Create a new node
        node* new_node = malloc(sizeof(node));
        if(new_node == NULL) {
            printf("Memory allocation failed.\n");
            exit(1);
        }
        // Set the value of the new node to be the same as the current node
        new_node->x = curr->x;
        // Insert the new node after the current node
        new_node->next = curr->next;
        curr->next = new_node;
        // Move to the next existing node in the list
        curr = new_node->next;
    }
}
